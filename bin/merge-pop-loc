#!/usr/bin/env node
'use strict';

const fs = require('fs');
const parse = require('csv-parse/lib/sync');
const states = require('./states.json');

const popFile = process.argv[2];
const locFile = process.argv[3];

const popLines = fs.readFileSync(popFile, 'utf8');
const locLines = fs.readFileSync(locFile, 'utf8');

const MIN_POP = 1000;
// http://www.census.gov/popest/data/cities/totals/2015/files/SUB-EST2015.pdf
const INCORPORATED_PLACE = 162;
const CONSOLIDATED_CITY = 170;

const popData = parse(popLines, {
  trim: true,
  auto_parse: false,
  skip_empty_lines: true,
  relax_column_count: true,
  columns: ['sumlev', 'stnum', 'county', 'place', 'cousub', 'concit', 'flag', 'func', 'name', 'state', 'pop10', 'base10', 'est10', 'est11', 'est12', 'est13', 'est14', 'est15' ]
}).map((city) => {
  try {
    let type = Number(city.sumlev);
    if (type !== INCORPORATED_PLACE && type !== CONSOLIDATED_CITY) return {};
    return {
      name: city.name.toLowerCase().replace(' town', '').replace(' city', '').replace(' cdp', ''),
      state: states[city.state.toLowerCase()],
      population: Number(city.est15)
    };
  } catch (e) { return {}; }
})
.filter((city) => {
  return city.population >= MIN_POP;
})
.sort((a, b) => {
  return b.population - a.population;
});

const locData = parse(locLines, {
  trime: true,
  auto_parse: true,
  skip_empty_lines: true,
  relax_column_count: true,
  columns: ['state', 'fips52', 'name', 'fips55', 'gnis', 'type', 'lat', 'lon']
}).map((city) => {
  try {
    return {
      name: city.name.toLowerCase(),
      state: city.state.toLowerCase(),
      lat: city.lat,
      lon: city.lon
    };
  } catch (e) { return {}; }
});

const cities = popData.map(addLocation).filter(isValid);

console.log('name,state,population,lat,lon');
cities.forEach(c => console.log([c.name, c.state, c.population, c.lat, c.lon].join(',')));

function addLocation(city) {
  let location = locData.find(c => c.name === city.name && c.state === city.state);
  return Object.assign({}, city, location || {});
}

function isValid(city) {
  return city.name && city.state && city.population && city.lat && city.lon;
}
